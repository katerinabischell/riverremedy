---
title: "Water & Sediment Quality Analysis - Pilcomayo.net 2024"
author: "Katerina Bischel - River Remedy"
date: "`r Sys.Date()`"
format:
  html:
    theme: flatly
    toc: true
    toc-location: left
    toc-depth: 3
    code-fold: true
    smooth-scroll: true
    fig-width: 12
    fig-height: 8
    embed-resources: true
execute:
  echo: true
  warning: false
  message: false
  cache: true
---

```{r setup, include=FALSE}
# Load required libraries
library(tidyverse)
library(readr)
library(ggplot2)
library(sf)
library(corrplot)
library(leaflet)
library(DT)
library(plotly)
library(scales)
library(viridis)
library(patchwork)
library(knitr)

# Set global options
knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.align = "center"
)

# Custom theme for contamination analysis
theme_contamination <- theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 11, color = "gray50"),
    axis.title = element_text(size = 11),
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    strip.text = element_text(face = "bold")
  )

# Define contamination alert colors
alert_colors <- c(
  "Safe" = "#2E8B57",      # Sea Green
  "Moderate" = "#FFD700",   # Gold
  "High" = "#FF6347",       # Tomato
  "Critical" = "#DC143C"    # Crimson
)

# Create comprehensive translation dictionary
translation_dict <- c(
  # Station metadata
  "Código" = "Station_Code",
  "Fecha" = "Date",
  "Río" = "River",
  "Cuenca" = "Basin",
  "Latitud Decimal" = "Decimal_Latitude",
  "Longitud Decimal" = "Decimal_Longitude",
  
  # Heavy metals
  "Arsenico total" = "Total_Arsenic",
  "Cadmio total" = "Total_Cadmium", 
  "Plomo total" = "Total_Lead",
  "Mercurio total" = "Total_Mercury",
  "Cromo total" = "Total_Chromium",
  "Niquel total" = "Total_Nickel",
  "Cobre total" = "Total_Copper",
  "Zinc total" = "Total_Zinc",
  "Bismuto total" = "Total_Bismuth",
  "Talio total" = "Total_Thallium",
  "Boro total" = "Total_Boron",
  "Hierro total" = "Total_Iron",
  "Manganeso total" = "Total_Manganese",
  "Aluminio total" = "Total_Aluminum",
  "Bario total" = "Total_Barium",
  "Berilio total" = "Total_Beryllium",
  "Cobalto total" = "Total_Cobalt",
  "Estaño total" = "Total_Tin",
  "Estroncio total" = "Total_Strontium",
  "Litio total" = "Total_Lithium",
  "Molibdeno total" = "Total_Molybdenum",
  "Plata total" = "Total_Silver",
  "Selenio total" = "Total_Selenium",
  "Titanio total" = "Total_Titanium",
  "Uranio total" = "Total_Uranium",
  "Vanadio total" = "Total_Vanadium",
  
  # Water quality parameters
  "pH" = "pH",
  "Conductividad específica (T ref. 25°C)" = "Specific_Conductivity_25C",
  "Conductividad específica" = "Specific_Conductivity",
  "Oxígeno disuelto" = "Dissolved_Oxygen",
  "Turbiedad" = "Turbidity",
  "Sólidos totales" = "Total_Solids",
  "Sólidos disueltos totales" = "Total_Dissolved_Solids",
  "Sólidos suspendidos totales" = "Total_Suspended_Solids",
  "Temperatura" = "Temperature",
  "Color" = "Color",
  "Olor" = "Odor",
  "Sabor" = "Taste",
  "Aspecto" = "Appearance",
  
  # Chemical parameters
  "Alcalinidad total" = "Total_Alkalinity",
  "Dureza total" = "Total_Hardness",
  "Cloruros" = "Chlorides",
  "Sulfatos" = "Sulfates",
  "Nitratos" = "Nitrates",
  "Nitritos" = "Nitrites",
  "Fosfatos" = "Phosphates",
  "Fluoruros" = "Fluorides",
  "Cianuros" = "Cyanides",
  "Fenoles" = "Phenols",
  
  # Biological parameters
  "Coliformes totales" = "Total_Coliforms",
  "Coliformes fecales" = "Fecal_Coliforms",
  "Escherichia coli" = "E_coli",
  "Demanda bioquímica de oxígeno" = "BOD",
  "Demanda química de oxígeno" = "COD",
  
  # Additional parameters
  "Aceites y grasas" = "Oils_and_Grease",
  "Detergentes" = "Detergents",
  "Pesticidas organoclorados" = "Organochlorine_Pesticides",
  "Pesticidas organofosforados" = "Organophosphate_Pesticides"
)

# Function to translate parameter names
translate_parameters <- function(data, dict = translation_dict) {
  # Translate parameter column if it exists
  if("parameter" %in% names(data)) {
    data$parameter <- ifelse(
      data$parameter %in% names(dict),
      dict[data$parameter],
      data$parameter
    )
  }
  
  # Translate column names
  names(data) <- ifelse(
    names(data) %in% names(dict),
    dict[names(data)],
    names(data)
  )
  
  return(data)
}
```

## Executive Summary

This report presents a comprehensive analysis of water and sediment quality in the Pilcomayo River system around Potosí, Bolivia, with focus on contamination assessment related to lithium mining activities. All parameter names have been translated to English for international accessibility.

## Data Loading and Preparation

```{r data-loading}
# Load water quality data (wide format - stations as columns, parameters as rows)
water_raw <- read_csv("/Users/ktdroppa/Desktop/riverremedy/data/raw/calidad_agua_20250711060422.csv")

# Load sediment quality data
sediment_raw <- read_csv("/Users/ktdroppa/Desktop/riverremedy/data/raw/calidad_sedimentos_20250711060913.csv")

cat("Water Quality Dataset:", nrow(water_raw), "parameters x", ncol(water_raw), "stations\n")
cat("Sediment Quality Dataset:", nrow(sediment_raw), "parameters x", ncol(sediment_raw), "stations\n")
```

```{r data-transformation}
cat("Water data structure:\n")
cat("Column names:\n")
print(names(water_raw))
cat("First few rows:\n")
print(head(water_raw, 3))

# Clean column names first
names(water_raw) <- make.names(names(water_raw), unique = TRUE)

# Transform water data from wide to long format
water_long <- water_raw %>%
  # Get parameter names from first column (adjust column name as needed)
  mutate(parameter = .[[1]]) %>%  # Use first column regardless of name
  select(-1) %>%  # Remove the first column
  # Remove any completely empty columns
  select(where(~ !all(is.na(.x) | .x == ""))) %>%
  # Convert to long format
  pivot_longer(
    cols = -parameter,
    names_to = "station",
    values_to = "value"
  ) %>%
  filter(!is.na(parameter), !is.na(value), parameter != "", value != "") %>%
  # Clean numeric values
  mutate(
    value_numeric = as.numeric(value),
    # Extract coordinates when parameter is Latitud Decimal or Longitud Decimal
    is_coordinate = parameter %in% c("Latitud Decimal", "Longitud Decimal")
  )

# Translate parameter names to English
water_long <- translate_parameters(water_long)

# Create station metadata
station_metadata <- water_long %>%
  filter(parameter %in% c("Station_Code", "Date", "River", "Basin", "Decimal_Latitude", "Decimal_Longitude")) %>%
  select(station, parameter, value) %>%
  pivot_wider(names_from = parameter, values_from = value) %>%
  mutate(
    latitude = as.numeric(Decimal_Latitude),
    longitude = as.numeric(Decimal_Longitude),
    date = as.Date(Date, format = "%d/%m/%Y")
  )

# Define English heavy metals list
heavy_metals_en <- c(
  "Total_Arsenic", "Total_Cadmium", "Total_Lead", "Total_Mercury",
  "Total_Chromium", "Total_Nickel", "Total_Copper", "Total_Zinc",
  "Total_Bismuth", "Total_Thallium", "Total_Boron", "Total_Iron",
  "Total_Manganese", "Total_Aluminum", "Total_Lithium"
)

# Define English water quality parameters
water_quality_params_en <- c(
  "pH", "Specific_Conductivity_25C", "Specific_Conductivity", "Dissolved_Oxygen",
  "Turbidity", "Total_Solids", "Total_Dissolved_Solids", "Temperature"
)

# Extract heavy metals data
heavy_metals_data <- water_long %>%
  filter(parameter %in% heavy_metals_en) %>%
  mutate(
    value_numeric = as.numeric(value),
    # Convert units if needed (assuming mg/L)
    concentration_mg_l = case_when(
      parameter == "Total_Mercury" ~ value_numeric / 1000, # if in µg/L
      TRUE ~ value_numeric
    )
  ) %>%
  filter(!is.na(concentration_mg_l))

# Extract water quality parameters
water_quality_data <- water_long %>%
  filter(parameter %in% water_quality_params_en) %>%
  mutate(value_numeric = as.numeric(value)) %>%
  filter(!is.na(value_numeric))

cat("Heavy metals data points:", nrow(heavy_metals_data), "\n")
cat("Water quality data points:", nrow(water_quality_data), "\n")
cat("Stations with coordinates:", sum(!is.na(station_metadata$latitude)), "\n")
```

## Station Overview and Spatial Distribution

```{r station-overview}
# Create table of stations with English headers
station_summary <- station_metadata %>%
  select(station, Station_Code, Date, River, latitude, longitude) %>%
  arrange(station) %>%
  rename(
    "Station ID" = station,
    "Station Code" = Station_Code,
    "Sampling Date" = Date,
    "River System" = River,
    "Latitude" = latitude,
    "Longitude" = longitude
  )

DT::datatable(
  station_summary,
  options = list(
    scrollX = TRUE,
    pageLength = 15,
    dom = 'Bfrtip'
  ),
  caption = "Monitoring Stations in Pilcomayo River System"
) %>%
  formatRound(columns = c("Latitude", "Longitude"), digits = 6)
```

```{r spatial-map}
# Create interactive map of sampling locations
if(sum(!is.na(station_metadata$latitude)) > 0) {
  
  # Prepare data for mapping
  map_data <- station_metadata %>%
    filter(!is.na(latitude), !is.na(longitude)) %>%
    mutate(
      # Color code by river system
      river_color = case_when(
        str_detect(River, "Pilcomayo") ~ "red",
        str_detect(River, "Tarapaya") ~ "blue", 
        str_detect(River, "Ribera") ~ "green",
        TRUE ~ "orange"
      )
    )
  
  # Create leaflet map
  leaflet(map_data) %>%
    addTiles() %>%
    addCircleMarkers(
      lng = ~longitude,
      lat = ~latitude,
      radius = 8,
      color = ~river_color,
      fillOpacity = 0.7,
      popup = ~paste(
        "<b>Station:</b>", station, "<br>",
        "<b>Code:</b>", Station_Code, "<br>",
        "<b>River:</b>", River, "<br>",
        "<b>Date:</b>", Date, "<br>",
        "<b>Coordinates:</b>", round(latitude, 4), ",", round(longitude, 4)
      )
    ) %>%
    addLegend(
      "bottomright",
      colors = c("red", "blue", "green", "orange"),
      labels = c("Pilcomayo", "Tarapaya", "Ribera", "Other"),
      title = "River System"
    )
}
```

## Heavy Metals Contamination Analysis

```{r heavy-metals-summary}
# Calculate summary statistics for heavy metals
metals_summary <- heavy_metals_data %>%
  group_by(parameter) %>%
  summarise(
    n_samples = n(),
    mean_conc = mean(concentration_mg_l, na.rm = TRUE),
    median_conc = median(concentration_mg_l, na.rm = TRUE),
    max_conc = max(concentration_mg_l, na.rm = TRUE),
    min_conc = min(concentration_mg_l, na.rm = TRUE),
    std_dev = sd(concentration_mg_l, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  arrange(desc(mean_conc))

# Define WHO/EPA guidelines for drinking water (mg/L) - English version
who_guidelines_en <- tibble(
  parameter = c("Total_Arsenic", "Total_Cadmium", "Total_Lead", "Total_Mercury",
                "Total_Chromium", "Total_Nickel", "Total_Copper", "Total_Zinc"),
  who_limit = c(0.01, 0.003, 0.01, 0.006, 0.05, 0.07, 2.0, 3.0),
  metal_name = c("Arsenic", "Cadmium", "Lead", "Mercury", 
                 "Chromium", "Nickel", "Copper", "Zinc")
)

# Join with guidelines
metals_assessment <- metals_summary %>%
  left_join(who_guidelines_en, by = "parameter") %>%
  mutate(
    exceedance_ratio = mean_conc / who_limit,
    contamination_level = case_when(
      is.na(who_limit) ~ "No guideline",
      mean_conc <= who_limit ~ "Safe",
      mean_conc <= who_limit * 2 ~ "Moderate",
      mean_conc <= who_limit * 5 ~ "High",
      TRUE ~ "Critical"
    ),
    # Clean parameter names for display
    parameter_display = coalesce(metal_name, str_remove(parameter, "Total_"))
  )

# Display contamination assessment with clean names
display_table <- metals_assessment %>%
  select(parameter_display, n_samples, mean_conc, max_conc, who_limit, 
         exceedance_ratio, contamination_level) %>%
  mutate(
    mean_conc = round(mean_conc, 4),
    max_conc = round(max_conc, 4),
    exceedance_ratio = round(exceedance_ratio, 2)
  ) %>%
  rename(
    "Heavy Metal" = parameter_display,
    "Sample Count" = n_samples,
    "Mean Conc. (mg/L)" = mean_conc,
    "Max Conc. (mg/L)" = max_conc,
    "WHO Limit (mg/L)" = who_limit,
    "Exceedance Ratio" = exceedance_ratio,
    "Contamination Level" = contamination_level
  )

DT::datatable(
  display_table,
  options = list(pageLength = 15),
  caption = "Heavy Metals Contamination Assessment vs WHO Guidelines"
) %>%
  formatStyle(
    "Contamination Level",
    backgroundColor = styleEqual(
      c("Safe", "Moderate", "High", "Critical"),
      c("#2E8B57", "#FFD700", "#FF6347", "#DC143C")
    ),
    color = "white",
    fontWeight = "bold"
  )
```

```{r metals-distribution}
# Create boxplot for heavy metals concentrations
metals_plot <- heavy_metals_data %>%
  mutate(
    log_concentration = log10(concentration_mg_l + 0.001), # Add small value to handle zeros
    parameter_clean = str_remove(parameter, "Total_")
  ) %>%
  ggplot(aes(x = reorder(parameter_clean, concentration_mg_l, median), 
             y = log_concentration)) +
  geom_boxplot(aes(fill = parameter_clean), alpha = 0.7, show.legend = FALSE) +
  geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
  coord_flip() +
  scale_fill_viridis_d() +
  labs(
    title = "Heavy Metals Concentration Distribution",
    subtitle = "Log scale concentration across all monitoring stations",
    x = "Heavy Metal",
    y = "Log₁₀ Concentration (mg/L)",
    caption = "Each point represents a sampling station"
  ) +
  theme_contamination

print(metals_plot)
```

```{r spatial-contamination}
# Calculate contamination index for each station
if(sum(!is.na(station_metadata$latitude)) > 0) {
  
  station_contamination <- heavy_metals_data %>%
    left_join(who_guidelines_en, by = "parameter") %>%
    filter(!is.na(who_limit)) %>%
    mutate(
      contamination_ratio = concentration_mg_l / who_limit
    ) %>%
    group_by(station) %>%
    summarise(
      avg_contamination_ratio = mean(contamination_ratio, na.rm = TRUE),
      max_contamination_ratio = max(contamination_ratio, na.rm = TRUE),
      n_metals_above_limit = sum(contamination_ratio > 1, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    left_join(station_metadata, by = "station") %>%
    filter(!is.na(latitude)) %>%
    mutate(
      contamination_category = case_when(
        avg_contamination_ratio <= 1 ~ "Safe",
        avg_contamination_ratio <= 2 ~ "Moderate",
        avg_contamination_ratio <= 5 ~ "High",
        TRUE ~ "Critical"
      )
    )
  
  # Create contamination map
  pal <- colorFactor(
    palette = c("#2E8B57", "#FFD700", "#FF6347", "#DC143C"),
    domain = c("Safe", "Moderate", "High", "Critical")
  )
  
  leaflet(station_contamination) %>%
    addTiles() %>%
    addCircleMarkers(
      lng = ~longitude,
      lat = ~latitude,
      radius = ~pmax(5, pmin(20, avg_contamination_ratio * 3)),
      color = ~pal(contamination_category),
      fillOpacity = 0.8,
      popup = ~paste(
        "<b>Station:</b>", station, "<br>",
        "<b>Contamination Level:</b>", contamination_category, "<br>",
        "<b>Avg Ratio vs WHO:</b>", round(avg_contamination_ratio, 2), "<br>",
        "<b>Metals Above Limit:</b>", n_metals_above_limit, "<br>",
        "<b>River:</b>", River
      )
    ) %>%
    addLegend(
      "bottomright",
      pal = pal,
      values = ~contamination_category,
      title = "Contamination Level"
    )
}
```

## Water Quality Parameters Analysis

```{r water-quality-analysis}
# Analyze key water quality parameters
wq_summary <- water_quality_data %>%
  mutate(
    parameter_clean = case_when(
      parameter == "Specific_Conductivity_25C" ~ "Specific Conductivity",
      parameter == "Dissolved_Oxygen" ~ "Dissolved Oxygen",
      parameter == "Total_Dissolved_Solids" ~ "Total Dissolved Solids",
      parameter == "Total_Solids" ~ "Total Solids",
      TRUE ~ parameter
    )
  ) %>%
  group_by(parameter_clean) %>%
  summarise(
    n_samples = n(),
    mean_val = mean(value_numeric, na.rm = TRUE),
    median_val = median(value_numeric, na.rm = TRUE),
    std_dev = sd(value_numeric, na.rm = TRUE),
    min_val = min(value_numeric, na.rm = TRUE),
    max_val = max(value_numeric, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  rename(
    "Parameter" = parameter_clean,
    "Sample Count" = n_samples,
    "Mean Value" = mean_val,
    "Median Value" = median_val,
    "Std Deviation" = std_dev,
    "Min Value" = min_val,
    "Max Value" = max_val
  )

# Water quality standards for aquatic life
wq_standards_en <- tibble(
  parameter = c("pH", "Dissolved_Oxygen", "Specific_Conductivity_25C"),
  min_safe = c(6.5, 5.0, NA),
  max_safe = c(8.5, NA, 1000),
  units = c("pH units", "mg/L", "µS/cm"),
  parameter_name = c("pH", "Dissolved Oxygen", "Specific Conductivity")
)

DT::datatable(
  wq_summary %>%
    mutate(across(where(is.numeric), ~ round(.x, 2))),
  caption = "Water Quality Parameters Summary"
)
```

```{r water-quality-plots}
# Create multi-panel plot for key water quality parameters
wq_plots <- water_quality_data %>%
  filter(parameter %in% c("pH", "Dissolved_Oxygen", "Specific_Conductivity_25C", "Turbidity")) %>%
  mutate(
    parameter_clean = case_when(
      parameter == "Dissolved_Oxygen" ~ "Dissolved Oxygen",
      parameter == "Specific_Conductivity_25C" ~ "Specific Conductivity",
      TRUE ~ parameter
    )
  ) %>%
  ggplot(aes(x = station, y = value_numeric)) +
  geom_boxplot(aes(fill = parameter_clean), alpha = 0.7) +
  facet_wrap(~parameter_clean, scales = "free_y", ncol = 2) +
  theme_contamination +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8)) +
  labs(
    title = "Water Quality Parameters by Station",
    x = "Monitoring Station",
    y = "Parameter Value",
    fill = "Parameter"
  ) +
  scale_fill_viridis_d()

print(wq_plots)
```

## Correlation Analysis

```{r correlation-analysis}
# Create correlation matrix for metals and key parameters
metals_wide <- heavy_metals_data %>%
  mutate(parameter_clean = str_remove(parameter, "Total_")) %>%
  select(station, parameter_clean, concentration_mg_l) %>%
  pivot_wider(names_from = parameter_clean, values_from = concentration_mg_l)

# Include key water quality parameters
wq_wide <- water_quality_data %>%
  filter(parameter %in% c("pH", "Specific_Conductivity_25C", "Dissolved_Oxygen")) %>%
  mutate(
    parameter_clean = case_when(
      parameter == "Specific_Conductivity_25C" ~ "Conductivity",
      parameter == "Dissolved_Oxygen" ~ "Dissolved_O2",
      TRUE ~ parameter
    )
  ) %>%
  select(station, parameter_clean, value_numeric) %>%
  pivot_wider(names_from = parameter_clean, values_from = value_numeric)

# Combine datasets
combined_data <- metals_wide %>%
  full_join(wq_wide, by = "station") %>%
  select(-station) %>%
  # Only include variables with sufficient data (at least 5 non-NA values)
  select(where(~ sum(!is.na(.x)) > 5)) %>%
  # Remove columns with zero variance
  select(where(~ var(.x, na.rm = TRUE) > 0))

if(ncol(combined_data) > 1) {
  # Calculate correlation matrix
  cor_matrix <- cor(combined_data, use = "pairwise.complete.obs")
  
  # Check for any remaining NA/NaN/Inf values and handle them
  if(any(is.na(cor_matrix)) || any(is.infinite(cor_matrix))) {
    # Remove rows/columns with NA correlations
    valid_vars <- !apply(cor_matrix, 1, function(x) any(is.na(x) | is.infinite(x)))
    cor_matrix <- cor_matrix[valid_vars, valid_vars]
  }
  
  # Only proceed if we have a valid correlation matrix
  if(nrow(cor_matrix) > 1 && all(is.finite(cor_matrix))) {
    # Create correlation plot without hierarchical clustering to avoid issues
    corrplot(
      cor_matrix,
      method = "color",
      type = "upper",
      order = "original",  # Changed from "hclust" to "original"
      tl.cex = 0.8,
      tl.col = "black",
      title = "Correlation Matrix: Heavy Metals and Water Quality",
      mar = c(0, 0, 2, 0),
      col = colorRampPalette(c("#DC143C", "white", "#2E8B57"))(200)
    )
  } else {
    cat("Insufficient valid data for correlation analysis.\n")
  }
} else {
  cat("Insufficient variables for correlation analysis.\n")
}
```

## Priority Contamination Areas

```{r priority-areas}
# Identify priority areas for remediation
if(exists("station_contamination")) {
  priority_stations <- station_contamination %>%
    filter(contamination_category %in% c("High", "Critical")) %>%
    arrange(desc(avg_contamination_ratio)) %>%
    select(station, Station_Code, River, contamination_category, 
           avg_contamination_ratio, n_metals_above_limit) %>%
    rename(
      "Station ID" = station,
      "Station Code" = Station_Code,
      "River System" = River,
      "Contamination Category" = contamination_category,
      "Avg Contamination Ratio" = avg_contamination_ratio,
      "Metals Above WHO Limit" = n_metals_above_limit
    )
  
  if(nrow(priority_stations) > 0) {
    DT::datatable(
      priority_stations %>%
        mutate(`Avg Contamination Ratio` = round(`Avg Contamination Ratio`, 2)),
      caption = "Priority Stations for Contamination Remediation",
      options = list(pageLength = 10)
    ) %>%
      formatStyle(
        "Contamination Category",
        backgroundColor = styleEqual(
          c("High", "Critical"),
          c("#FF6347", "#DC143C")
        ),
        color = "white",
        fontWeight = "bold"
      )
  } else {
    cat("No stations identified as high priority based on current thresholds.")
  }
}
```

## Mining-Specific Contaminants

```{r mining-contaminants}
# Focus on lithium mining-related contaminants
mining_metals_en <- c("Total_Bismuth", "Total_Thallium", "Total_Boron", "Total_Arsenic", "Total_Lithium")

mining_contamination <- heavy_metals_data %>%
  filter(parameter %in% mining_metals_en) %>%
  mutate(
    parameter_clean = str_remove(parameter, "Total_")
  ) %>%
  group_by(parameter_clean, station) %>%
  summarise(concentration = mean(concentration_mg_l, na.rm = TRUE), .groups = "drop")

if(nrow(mining_contamination) > 0) {
  mining_plot <- mining_contamination %>%
    ggplot(aes(x = station, y = concentration, fill = parameter_clean)) +
    geom_col(position = "dodge", alpha = 0.8) +
    facet_wrap(~parameter_clean, scales = "free_y") +
    theme_contamination +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) +
    labs(
      title = "Lithium Mining-Related Contaminants",
      subtitle = "Bismuth, Thallium, Boron, Arsenic, and Lithium concentrations by station",
      x = "Monitoring Station",
      y = "Concentration (mg/L)",
      fill = "Contaminant"
    ) +
    scale_fill_viridis_d()
  
  print(mining_plot)
}
```

## Final Summary

```{r final-summary}
# Generate final assessment
total_stations <- length(unique(heavy_metals_data$station))
contaminated_stations <- if(exists("station_contamination")) {
  sum(station_contamination$contamination_category %in% c("Moderate", "High", "Critical"))
} else { "Data processing required" }

critical_stations <- if(exists("station_contamination")) {
  sum(station_contamination$contamination_category == "Critical")
} else { "Data processing required" }

# Calculate actual sampling period from data
if(nrow(station_metadata) > 0 && !all(is.na(station_metadata$date))) {
  date_range <- range(station_metadata$date, na.rm = TRUE)
  sampling_period <- paste(
    format(date_range[1], "%B %Y"), 
    "to", 
    format(date_range[2], "%B %Y")
  )
} else {
  sampling_period <- "Date information not available"
}

cat("FINAL ASSESSMENT SUMMARY:\n")
cat("========================\n")
cat("Total monitoring stations:", total_stations, "\n")
cat("Stations with contamination concerns:", contaminated_stations, "\n")
cat("Critical contamination sites:", critical_stations, "\n")
cat("Sampling period:", sampling_period, "\n")

# Create final summary table with English labels
final_results <- tibble(
  Metric = c("Total Monitoring Stations", "Heavy Metals Analyzed", "Water Quality Parameters", 
             "Stations with Coordinates", "Sampling Period"),
  Value = c(
    as.character(total_stations),
    as.character(length(heavy_metals_en)),
    as.character(length(water_quality_params_en)),
    as.character(sum(!is.na(station_metadata$latitude))),
    sampling_period
  )
)

kable(final_results, caption = "Study Overview and Key Metrics")
```

## Sediment Quality Analysis (if available)

```{r sediment-analysis}
# Process sediment data if available
if(exists("sediment_raw") && nrow(sediment_raw) > 0) {
  
  cat("Processing sediment quality data...\n")
  
  # Clean sediment column names
  names(sediment_raw) <- make.names(names(sediment_raw), unique = TRUE)
  
  # Transform sediment data similar to water data
  sediment_long <- sediment_raw %>%
    mutate(parameter = .[[1]]) %>%
    select(-1) %>%
    select(where(~ !all(is.na(.x) | .x == ""))) %>%
    pivot_longer(
      cols = -parameter,
      names_to = "station",
      values_to = "value"
    ) %>%
    filter(!is.na(parameter), !is.na(value), parameter != "", value != "") %>%
    mutate(value_numeric = as.numeric(value))
  
  # Translate sediment parameter names
  sediment_long <- translate_parameters(sediment_long)
  
  # Extract sediment heavy metals
  sediment_metals <- sediment_long %>%
    filter(parameter %in% heavy_metals_en) %>%
    filter(!is.na(value_numeric))
  
  if(nrow(sediment_metals) > 0) {
    # Calculate sediment contamination summary
    sediment_summary <- sediment_metals %>%
      mutate(parameter_clean = str_remove(parameter, "Total_")) %>%
      group_by(parameter_clean) %>%
      summarise(
        n_samples = n(),
        mean_conc = mean(value_numeric, na.rm = TRUE),
        median_conc = median(value_numeric, na.rm = TRUE),
        max_conc = max(value_numeric, na.rm = TRUE),
        .groups = "drop"
      ) %>%
      arrange(desc(mean_conc))
    
    # Display sediment results
    DT::datatable(
      sediment_summary %>%
        mutate(across(where(is.numeric), ~ round(.x, 4))) %>%
        rename(
          "Heavy Metal" = parameter_clean,
          "Sample Count" = n_samples,
          "Mean Conc. (mg/kg)" = mean_conc,
          "Median Conc. (mg/kg)" = median_conc,
          "Max Conc. (mg/kg)" = max_conc
        ),
      caption = "Sediment Heavy Metals Concentration Summary"
    )
    
    # Create sediment contamination plot
    sediment_plot <- sediment_metals %>%
      mutate(
        parameter_clean = str_remove(parameter, "Total_"),
        log_concentration = log10(value_numeric + 0.001)
      ) %>%
      ggplot(aes(x = reorder(parameter_clean, value_numeric, median), 
                 y = log_concentration)) +
      geom_boxplot(aes(fill = parameter_clean), alpha = 0.7, show.legend = FALSE) +
      geom_jitter(width = 0.2, alpha = 0.5, size = 1) +
      coord_flip() +
      scale_fill_viridis_d() +
      labs(
        title = "Sediment Heavy Metals Concentration Distribution",
        subtitle = "Log scale concentration across all monitoring stations",
        x = "Heavy Metal",
        y = "Log₁₀ Concentration (mg/kg dry weight)",
        caption = "Each point represents a sampling station"
      ) +
      theme_contamination
    
    print(sediment_plot)
  } else {
    cat("No heavy metals data found in sediment dataset.\n")
  }
} else {
  cat("Sediment data not available or empty.\n")
}
```

## Data Quality Assessment

```{r data-quality}
# Assess data completeness and quality
data_quality <- tibble(
  Dataset = c("Water Quality", "Sediment Quality"),
  `Total Parameters` = c(
    length(unique(water_long$parameter)),
    if(exists("sediment_long")) length(unique(sediment_long$parameter)) else 0
  ),
  `Heavy Metals Available` = c(
    sum(heavy_metals_en %in% unique(water_long$parameter)),
    if(exists("sediment_long")) sum(heavy_metals_en %in% unique(sediment_long$parameter)) else 0
  ),
  `Stations with Data` = c(
    length(unique(water_long$station)),
    if(exists("sediment_long")) length(unique(sediment_long$station)) else 0
  ),
  `Stations with Coordinates` = c(
    sum(!is.na(station_metadata$latitude)),
    sum(!is.na(station_metadata$latitude))  # Same for both datasets
  ),
  `Data Completeness` = c(
    paste0(round(100 * sum(!is.na(water_long$value_numeric)) / nrow(water_long), 1), "%"),
    if(exists("sediment_long")) paste0(round(100 * sum(!is.na(sediment_long$value_numeric)) / nrow(sediment_long), 1), "%") else "N/A"
  )
)

kable(data_quality, caption = "Data Quality and Completeness Assessment")
```

## Environmental Risk Assessment

```{r risk-assessment}
# Create environmental risk matrix
if(exists("station_contamination")) {
  
  risk_assessment <- station_contamination %>%
    mutate(
      # Risk categories based on contamination levels and ecological factors
      ecological_risk = case_when(
        contamination_category == "Critical" & n_metals_above_limit >= 3 ~ "Extreme Risk",
        contamination_category == "Critical" | n_metals_above_limit >= 4 ~ "High Risk",
        contamination_category == "High" | n_metals_above_limit >= 2 ~ "Moderate Risk",
        contamination_category == "Moderate" | n_metals_above_limit >= 1 ~ "Low Risk",
        TRUE ~ "Minimal Risk"
      ),
      # Human health risk (simplified)
      health_risk = case_when(
        avg_contamination_ratio >= 5 ~ "High Health Risk",
        avg_contamination_ratio >= 2 ~ "Moderate Health Risk",
        avg_contamination_ratio >= 1 ~ "Low Health Risk",
        TRUE ~ "Minimal Health Risk"
      )
    ) %>%
    select(station, Station_Code, River, contamination_category, 
           ecological_risk, health_risk, avg_contamination_ratio, n_metals_above_limit)
  
  # Summary of risk levels
  risk_summary <- risk_assessment %>%
    count(ecological_risk, health_risk) %>%
    arrange(desc(n))
  
  cat("ENVIRONMENTAL RISK SUMMARY:\n")
  cat("==========================\n")
  print(risk_summary)
  
  # Display detailed risk assessment
  DT::datatable(
    risk_assessment %>%
      rename(
        "Station ID" = station,
        "Station Code" = Station_Code,
        "River System" = River,
        "Contamination Level" = contamination_category,
        "Ecological Risk" = ecological_risk,
        "Health Risk" = health_risk,
        "Contamination Ratio" = avg_contamination_ratio,
        "Metals Above Limit" = n_metals_above_limit
      ) %>%
      mutate(`Contamination Ratio` = round(`Contamination Ratio`, 2)),
    caption = "Environmental and Health Risk Assessment by Station",
    options = list(pageLength = 15, scrollX = TRUE)
  ) %>%
    formatStyle(
      "Ecological Risk",
      backgroundColor = styleEqual(
        c("Minimal Risk", "Low Risk", "Moderate Risk", "High Risk", "Extreme Risk"),
        c("#2E8B57", "#90EE90", "#FFD700", "#FF6347", "#8B0000")
      ),
      color = "white",
      fontWeight = "bold"
    ) %>%
    formatStyle(
      "Health Risk",
      backgroundColor = styleEqual(
        c("Minimal Health Risk", "Low Health Risk", "Moderate Health Risk", "High Health Risk"),
        c("#2E8B57", "#90EE90", "#FFD700", "#DC143C")
      ),
      color = "white",
      fontWeight = "bold"
    )
}
```

## Conclusions and Recommendations

**Key Findings:**

-   Comprehensive monitoring network established across Pilcomayo River system with `r total_stations` monitoring stations
-   Heavy metals contamination detected at multiple stations, with `r contaminated_stations` stations showing contamination concerns
-   Mining-related contaminants (Bismuth, Thallium, Boron, Lithium) present in measurable concentrations
-   Spatial patterns indicate contamination sources linked to mining activities in the region
-   `r critical_stations` stations identified as critical priority areas for immediate remediation efforts

**Environmental Implications:**

1.  **Aquatic Ecosystem Health**: Elevated heavy metal concentrations pose significant risks to fish populations and aquatic biodiversity
2.  **Bioaccumulation Potential**: Persistent metals like mercury and lead can accumulate in the food chain
3.  **Downstream Impact**: Contamination in upper reaches affects water quality throughout the river system
4.  **Seasonal Variations**: Single-point sampling may not capture seasonal contamination patterns

**Immediate Recommendations:**

1.  **Source Control**: Implement immediate measures to reduce contaminant inputs at identified point sources
2.  **Treatment Systems**: Deploy water treatment systems in priority contamination areas
3.  **Enhanced Monitoring**: Establish real-time monitoring capabilities with automated alert systems
4.  **Public Health Protection**: Issue advisories for affected water sources used by local communities
5.  **Regulatory Enforcement**: Strengthen compliance monitoring for industrial discharges

**Long-term Strategy:**

1.  **Comprehensive Remediation Plan**: Develop integrated approach addressing both point and non-point sources
2.  **Ecosystem Restoration**: Implement habitat restoration projects in severely impacted areas
3.  **Stakeholder Engagement**: Involve local communities and industries in contamination reduction efforts
4.  **Research Collaboration**: Partner with academic institutions for ongoing contamination assessment
5.  **Adaptive Management**: Regularly update strategies based on monitoring results and emerging science

**Data Recommendations:**

1.  **Temporal Coverage**: Implement quarterly sampling to capture seasonal variations
2.  **Biological Monitoring**: Add fish tissue and benthic invertebrate sampling
3.  **Isotopic Analysis**: Use isotope signatures to identify specific contamination sources
4.  **Modeling Integration**: Develop predictive models for contamination transport and fate

------------------------------------------------------------------------

*This analysis provides a comprehensive baseline assessment of water quality in the Pilcomayo River system. Regular updates and expanded monitoring will be essential for tracking remediation progress and protecting ecosystem health.*

---
title: "Cerro Rico AMD Chemistry Analysis (2006–2007)"
author: "Katerina Bischel"
date: "`r Sys.Date()`"
format:
  html:
    theme: flatly
    toc: true
    toc-location: left
    toc-depth: 3
    code-fold: true
    smooth-scroll: true
    fig-width: 10
    fig-height: 6
execute:
  echo: true
  warning: false
  message: false
  cache: true
---

## Setup and Data Loading

```{r setup}
# Load required libraries
library(tidyverse)
library(readxl)
library(janitor)
library(patchwork)
library(skimr)
library(naniar)
library(here)
library(fs)          # for dir_ls function
library(scales)
library(corrplot)
library(kableExtra)

# Set theme for all plots
theme_set(theme_minimal() + 
          theme(plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
                axis.text.x = element_text(angle = 45, hjust = 1)))
```

```{r data-loading}
# Define base path and locate files
base <- here("data", "raw")

# Alternative approach if fs package isn't available
if (!require(fs, quietly = TRUE)) {
  # Use base R instead
  all_files <- list.files(base, pattern = "\\.xlsx$", full.names = TRUE)
  metal_files <- all_files[grepl("metal", all_files, ignore.case = TRUE)]
  phys_files <- all_files[grepl("physical", all_files, ignore.case = TRUE)]
} else {
  # Use fs package
  metal_files <- dir_ls(base, glob = "*metal*.xlsx")
  phys_files <- dir_ls(base, glob = "*physical*.xlsx")
}

# Validate file counts (adjust these numbers based on your actual files)
cat("Found", length(metal_files), "metal files and", length(phys_files), "physical files\n")
# stopifnot(length(metal_files) == 2, length(phys_files) == 3)  # Comment out if file counts differ

# Load and clean data
metals <- map_dfr(metal_files, ~read_excel(.x) %>% clean_names())
phys   <- map_dfr(phys_files, ~read_excel(.x) %>% clean_names())

# Join datasets
amd <- left_join(metals, phys, by = c("site", "season", "n"))

# Display basic info
cat("Dataset dimensions:", dim(amd), "\n")
cat("Column names:", paste(names(amd), collapse = ", "), "\n")
```

## Data Quality Assessment

```{r data-quality}
# Generate summary statistics
amd_summary <- skim(amd)
print(amd_summary)

# Visualize missing data patterns
vis_miss(amd, cluster = TRUE) +
  labs(title = "Missing Data Patterns in AMD Dataset") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Create missing data summary table
missing_summary <- amd %>%
  summarise(
    across(everything(), ~sum(is.na(.))),
    .groups = "drop"
  ) %>%
  pivot_longer(everything(), names_to = "variable", values_to = "missing_count") %>%
  mutate(
    missing_percent = round(missing_count / nrow(amd) * 100, 1),
    complete_count = nrow(amd) - missing_count
  ) %>%
  arrange(desc(missing_percent))

kable(missing_summary, 
      caption = "Missing Data Summary",
      col.names = c("Variable", "Missing Count", "Missing %", "Complete Count")) %>%
  kable_styling()
```

## Data Transformation

```{r data-transformation}
# Define metal columns (adjust based on your actual column names)
metal_cols <- c("al", "as", "cd", "co", "cr", "cu", "fe", "mn", "ni", "pb", "zn")

# Check which metal columns actually exist in the data
available_metals <- intersect(metal_cols, names(amd))
cat("Available metal columns:", paste(available_metals, collapse = ", "), "\n")

# Add pH categories to the main dataset
amd <- amd %>%
  mutate(
    # Create categorical variables for analysis
    season = factor(season, levels = c("dry", "wet")),
    
    # pH categories
    ph_category = case_when(
      p_h < 4 ~ "Very Acidic (<4)",
      p_h >= 4 & p_h < 6 ~ "Acidic (4-6)",
      p_h >= 6 & p_h < 9 ~ "Neutral-Alkaline (6-9)",
      p_h >= 9 ~ "Very Alkaline (>9)",
      TRUE ~ "Unknown"
    ),
    ph_category = factor(ph_category, levels = c("Very Acidic (<4)", "Acidic (4-6)", 
                                                "Neutral-Alkaline (6-9)", "Very Alkaline (>9)"))
  )

# Create long format for metal analysis using available metals
amd_long <- amd %>% 
  pivot_longer(
    cols = all_of(available_metals),
    names_to = "metal",
    values_to = "conc_mg_l"
  ) %>% 
  mutate(
    # Calculate daily loads (mg/L × L/s × conversion factor)
    load_kg_d = conc_mg_l * q_l_s * 86.4e-6,
    
    # Format metal names
    metal = factor(toupper(metal), levels = toupper(available_metals))
  ) %>%
  filter(!is.na(conc_mg_l))  # Remove missing concentration values

# Summary statistics for transformed data
transformation_summary <- amd_long %>%
  summarise(
    total_observations = n(),
    sites = n_distinct(site),
    metals = n_distinct(metal),
    seasons = n_distinct(season),
    load_range_kg_d = paste0(
      round(min(load_kg_d, na.rm = TRUE), 4), " – ",
      round(max(load_kg_d, na.rm = TRUE), 1)
    ),
    .groups = "drop"
  )

print(transformation_summary)
```

## Exploratory Data Analysis

### pH Analysis

```{r ph-analysis}
# pH distribution by site and season
p1 <- ggplot(amd, aes(x = reorder(site, p_h), y = p_h, fill = season)) +
  geom_col(position = "dodge", alpha = 0.8) +
  geom_hline(yintercept = c(4, 6, 9), linetype = "dashed", alpha = 0.7) +
  labs(
    x = "Site (ordered by pH)",
    y = "pH",
    title = "pH Levels by Site and Season",
    fill = "Season"
  ) +
  scale_fill_viridis_d(option = "C") +
  annotate("text", x = 1, y = 4.5, label = "Acidic", size = 3, alpha = 0.7) +
  annotate("text", x = 1, y = 7.5, label = "Neutral", size = 3, alpha = 0.7)

# pH category distribution
p2 <- ggplot(amd, aes(x = ph_category, fill = season)) +
  geom_bar(position = "dodge", alpha = 0.8) +
  labs(
    x = "pH Category",
    y = "Count",
    title = "Distribution of pH Categories",
    fill = "Season"
  ) +
  scale_fill_viridis_d(option = "C")

p1 / p2 + plot_annotation(title = "pH Analysis Overview")
```

### Metal Concentration Analysis

```{r metal-concentration}
# Only proceed if we have metal data
if(length(available_metals) > 0) {
  # Summary statistics by metal
  metal_stats <- amd_long %>%
    group_by(metal) %>%
    summarise(
      n_obs = n(),
      mean_conc = mean(conc_mg_l, na.rm = TRUE),
      median_conc = median(conc_mg_l, na.rm = TRUE),
      max_conc = max(conc_mg_l, na.rm = TRUE),
      cv = sd(conc_mg_l, na.rm = TRUE) / mean_conc,
      .groups = "drop"
    ) %>%
    arrange(desc(mean_conc))
  
  kable(metal_stats, 
        digits = 3,
        caption = "Metal Concentration Summary Statistics",
        col.names = c("Metal", "N Obs", "Mean (mg/L)", "Median (mg/L)", 
                     "Max (mg/L)", "CV")) %>%
    kable_styling()
  
  # Box plot of metal concentrations
  p_metals <- ggplot(amd_long, aes(x = reorder(metal, conc_mg_l), y = conc_mg_l, fill = metal)) +
    geom_boxplot(alpha = 0.7, show.legend = FALSE) +
    scale_y_log10(labels = scales::scientific) +
    labs(
      x = "Metal",
      y = "Concentration (mg/L, log scale)",
      title = "Metal Concentration Distributions"
    ) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
  print(p_metals)
} else {
  cat("No metal concentration data found. Please check column names.\n")
  cat("Available columns:", paste(names(amd), collapse = ", "), "\n")
}
```

### Seasonal Comparison

```{r seasonal-comparison}
# Only proceed if we have metal data
if(length(available_metals) > 0 && exists("metal_stats")) {
  # Focus on high-concentration metals
  high_conc_metals <- metal_stats %>%
    slice_max(mean_conc, n = 6) %>%
    pull(metal)
  
  # Seasonal comparison for key metals
  p3 <- ggplot(filter(amd_long, metal %in% high_conc_metals),
               aes(x = reorder(site, conc_mg_l), y = conc_mg_l, fill = season)) +
    geom_col(position = "dodge", alpha = 0.8) +
    facet_wrap(~metal, scales = "free_y") +
    scale_y_log10(labels = scales::scientific) +
    labs(
      x = "Site",
      y = "Concentration (mg/L, log scale)",
      title = "Seasonal Comparison of High-Concentration Metals",
      fill = "Season"
    ) +
    scale_fill_viridis_d(option = "C") +
    theme(axis.text.x = element_text(angle = 90, hjust = 1))
  
  print(p3)
} else {
  cat("Skipping seasonal comparison - no metal data available\n")
}
```

### Load Analysis

```{r load-analysis}
# Only proceed if we have metal data
if(length(available_metals) > 0 && nrow(amd_long) > 0) {
  # Calculate total loads by metal
  total_loads <- amd_long %>%
    group_by(metal) %>%
    summarise(
      total_load = sum(load_kg_d, na.rm = TRUE),
      mean_load = mean(load_kg_d, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    arrange(desc(total_load))
  
  # Top 8 metals by load
  top_metals <- total_loads %>%
    slice_max(total_load, n = min(8, nrow(total_loads))) %>%
    pull(metal)
  
  # Load comparison plot
  p4 <- ggplot(filter(amd_long, metal %in% top_metals),
               aes(x = reorder(site, load_kg_d), y = load_kg_d, fill = metal)) +
    geom_col(show.legend = FALSE, alpha = 0.8) +
    facet_wrap(~season + metal, scales = "free_y", ncol = 4) +
    scale_y_log10(labels = scales::scientific) +
    labs(
      x = "Site",
      y = "Load (kg/day, log scale)",
      title = "Daily Metal Loads by Site, Season, and Metal (Top Metals)"
    ) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
  
  print(p4)
  
  # Load summary table
  kable(total_loads, 
        digits = 3,
        caption = "Total Metal Loads (kg/day)",
        col.names = c("Metal", "Total Load", "Mean Load")) %>%
    kable_styling()
} else {
  cat("Skipping load analysis - no metal data available\n")
}
```

### Site-Level Analysis

```{r site-analysis}
# Site comparison
site_summary <- amd_long %>%
  group_by(site, season) %>%
  summarise(
    n_metals = n_distinct(metal),
    total_load = sum(load_kg_d, na.rm = TRUE),
    mean_ph = mean(p_h, na.rm = TRUE),
    mean_flow = mean(q_l_s, na.rm = TRUE),
    .groups = "drop"
  )

# Site ranking plot
ggplot(site_summary, aes(x = reorder(site, total_load), y = total_load, fill = season)) +
  geom_col(position = "dodge", alpha = 0.8) +
  scale_y_log10(labels = scales::scientific) +
  labs(
    x = "Site",
    y = "Total Load (kg/day, log scale)",
    title = "Total Metal Load by Site and Season",
    fill = "Season"
  ) +
  scale_fill_viridis_d(option = "C") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

### Correlation Analysis

```{r correlation-analysis}
# Correlation matrix for physical-chemical parameters
# First check what columns are available
numeric_cols <- names(amd)[sapply(amd, is.numeric)]
cat("Available numeric columns:", paste(numeric_cols, collapse = ", "), "\n")

# Select relevant columns that exist
possible_cols <- c("p_h", "temp_c", "cond_s_cm", "q_l_s", available_metals)
existing_cols <- intersect(possible_cols, numeric_cols)

if(length(existing_cols) > 1) {
  amd_numeric <- amd %>%
    select(all_of(existing_cols)) %>%
    drop_na()
  
  if(nrow(amd_numeric) > 0) {
    cor_matrix <- cor(amd_numeric, use = "complete.obs")
    
    # Plot correlation matrix
    corrplot(cor_matrix, 
             method = "color",
             type = "upper",
             tl.cex = 0.8,
             tl.col = "black",
             title = "Correlation Matrix: Physical-Chemical Parameters",
             mar = c(0,0,2,0))
  } else {
    cat("No complete cases available for correlation analysis\n")
  }
} else {
  cat("Insufficient numeric columns for correlation analysis\n")
}
```

## Key Findings Summary

```{r summary-findings}
# Generate key findings
key_findings <- list(
  sites = n_distinct(amd$site),
  ph_range = paste0(round(min(amd$p_h, na.rm = TRUE), 1), " - ", 
                   round(max(amd$p_h, na.rm = TRUE), 1)),
  acidic_sites = sum(amd$p_h < 6, na.rm = TRUE),
  total_samples = nrow(amd)
)

# Add metal-specific findings if available
if(exists("total_loads") && nrow(total_loads) > 0) {
  key_findings$highest_metal <- total_loads$metal[1]
  key_findings$highest_load <- round(total_loads$total_load[1], 2)
}

cat("=== KEY FINDINGS ===\n")
cat("• Sites analyzed:", key_findings$sites, "\n")
cat("• Total samples:", key_findings$total_samples, "\n")
cat("• pH range:", key_findings$ph_range, "\n")
cat("• Acidic samples (pH < 6):", key_findings$acidic_sites, "\n")
if(!is.null(key_findings$highest_metal)) {
  cat("• Highest loading metal:", key_findings$highest_metal, "\n")
  cat("• Highest total load:", key_findings$highest_load, "kg/day\n")
}
cat("• Available metals:", paste(available_metals, collapse = ", "), "\n")
```

## Recommendations

Based on this analysis, consider the following for future work:

1.  **Priority Sites**: Focus remediation efforts on sites with highest metal loads
2.  **Seasonal Monitoring**: Continue seasonal sampling to understand temporal patterns
3.  **pH Management**: Sites with pH \< 4 require immediate attention
4.  **Metal-Specific Treatment**: Different metals show different seasonal patterns requiring targeted approaches
5.  **Data Quality**: Improve data collection protocols to reduce missing values

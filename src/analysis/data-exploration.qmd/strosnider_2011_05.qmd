---
title: "Enhanced Cerro Rico AMD Chemistry Analysis (2006–2007)"
author: "Katerina Bischel"
date: "`r Sys.Date()`"
format:
  html:
    theme: flatly
    toc: true
    toc-location: left
    toc-depth: 3
    code-fold: true
    smooth-scroll: true
    fig-width: 10
    fig-height: 6
execute:
  echo: true
  warning: false
  message: false
  cache: true
---

```{r enhanced-amd-analysis}
# ============================================================================
# ENHANCED AMD ANALYSIS - COMPLETE IMPROVED VERSION WITH FIXES
# ============================================================================

# Load required libraries
library(tidyverse)
library(readxl)
library(janitor)
library(patchwork)
library(skimr)
library(naniar)
library(here)
library(fs)
library(scales)
library(corrplot)
library(kableExtra)
library(plotly)
library(RColorBrewer)
library(memoise)
library(DT)
library(broom)

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# File validation function
validate_files <- function(files, file_type = "data") {
  if (length(files) == 0) {
    stop(paste("No", file_type, "files found matching the pattern"))
  }
  
  for (file in files) {
    if (!file.exists(file)) {
      stop(paste("File not found:", file))
    }
  }
  
  cat("✓ Validated", length(files), file_type, "files\n")
  return(TRUE)
}

# Column validation function
validate_columns <- function(df, required_cols, dataset_name = "dataset") {
  missing_cols <- setdiff(required_cols, names(df))
  if (length(missing_cols) > 0) {
    warning(paste("Missing expected columns in", dataset_name, ":", 
                  paste(missing_cols, collapse = ", ")))
  }
  
  present_cols <- intersect(required_cols, names(df))
  cat("✓", dataset_name, "has", length(present_cols), "of", 
      length(required_cols), "expected columns\n")
  return(present_cols)
}

# Dynamic metal detection function
detect_metal_columns <- function(df) {
  # Common metal symbols
  metal_symbols <- c("al", "as", "cd", "co", "cr", "cu", "fe", "mn", "ni", "pb", "zn", 
                     "ag", "ba", "ca", "mg", "na", "k", "s", "si", "sb", "se", "mo", "v")
  
  # Find exact matches
  metal_cols <- names(df)[tolower(names(df)) %in% metal_symbols]
  
  # Pattern matching for variations (metal_something, something_metal)
  metal_pattern_cols <- names(df)[grepl(paste0("^(", paste(metal_symbols, collapse = "|"), ")(_|$)"), 
                                       tolower(names(df)))]
  
  detected_metals <- unique(c(metal_cols, metal_pattern_cols))
  cat("✓ Detected", length(detected_metals), "metal columns:", 
      paste(detected_metals, collapse = ", "), "\n")
  
  return(detected_metals)
}

# Enhanced data cleaning function
clean_amd_data <- function(df, dataset_name = "dataset") {
  original_rows <- nrow(df)
  original_cols <- ncol(df)
  
  df_clean <- df %>%
    # Remove completely empty rows/columns
    remove_empty(c("rows", "cols")) %>%
    # Standardize column names
    clean_names() %>%
    # Handle negative values for concentrations (often measurement errors)
    mutate(across(where(is.numeric), ~ifelse(.x < 0 & cur_column() != "temp_c", NA, .x))) %>%
    # Add data quality flags
    {if("p_h" %in% names(.)) mutate(., 
      ph_flag = case_when(
        p_h < 0 | p_h > 14 ~ "out_of_range",
        is.na(p_h) ~ "missing",
        TRUE ~ "valid"
      )) else .} %>%
    {if("q_l_s" %in% names(.)) mutate(., 
      flow_flag = case_when(
        q_l_s < 0 ~ "negative",
        is.na(q_l_s) ~ "missing",
        TRUE ~ "valid"
      )) else .}
  
  cat("✓ Cleaned", dataset_name, ":", original_rows, "→", nrow(df_clean), "rows,", 
      original_cols, "→", ncol(df_clean), "columns\n")
  
  return(df_clean)
}

# Outlier detection function
detect_outliers <- function(df, cols, method = "iqr") {
  for (col in cols) {
    if (col %in% names(df) && is.numeric(df[[col]])) {
      if (method == "iqr") {
        Q1 <- quantile(df[[col]], 0.25, na.rm = TRUE)
        Q3 <- quantile(df[[col]], 0.75, na.rm = TRUE)
        IQR <- Q3 - Q1
        lower <- Q1 - 1.5 * IQR
        upper <- Q3 + 1.5 * IQR
        
        df[[paste0(col, "_outlier")]] <- df[[col]] < lower | df[[col]] > upper
      }
    }
  }
  return(df)
}

# Custom theme function
theme_amd <- function() {
  theme_minimal() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
      plot.subtitle = element_text(hjust = 0.5, size = 12),
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom",
      panel.grid.minor = element_blank(),
      strip.background = element_rect(fill = "grey90", color = "white"),
      strip.text = element_text(face = "bold"),
      panel.border = element_rect(color = "grey80", fill = NA, size = 0.5)
    )
}

# Set enhanced theme
theme_set(theme_amd())

# Statistical comparison function
compare_seasons <- function(data, response_var) {
  if (!"season" %in% names(data) || !response_var %in% names(data)) {
    return(NULL)
  }
  
  test_results <- data %>%
    group_by(metal) %>%
    summarise(
      n_dry = sum(season == "dry", na.rm = TRUE),
      n_wet = sum(season == "wet", na.rm = TRUE),
      median_dry = median(get(response_var)[season == "dry"], na.rm = TRUE),
      median_wet = median(get(response_var)[season == "wet"], na.rm = TRUE),
      p_value = tryCatch({
        if (n_dry > 0 && n_wet > 0) {
          wilcox.test(get(response_var)[season == "dry"], 
                     get(response_var)[season == "wet"])$p.value
        } else NA
      }, error = function(e) NA),
      .groups = "drop"
    ) %>%
    mutate(
      fold_change = median_wet / median_dry,
      p_value_adj = p.adjust(p_value, method = "bonferroni"),
      significant = p_value_adj < 0.05 & !is.na(p_value_adj),
      interpretation = case_when(
        is.na(p_value) ~ "Insufficient data",
        significant & fold_change > 1.5 ~ "Higher in wet season",
        significant & fold_change < 0.67 ~ "Higher in dry season",
        significant ~ "Significantly different",
        TRUE ~ "No significant difference"
      )
    )
  
  return(test_results)
}

# ============================================================================
# DATA LOADING AND INITIAL PROCESSING
# ============================================================================

cat("=== ENHANCED AMD ANALYSIS STARTING ===\n")

# Define base path and locate files
base <- here("data", "raw")

# Robust file detection
tryCatch({
  if (require(fs, quietly = TRUE)) {
    metal_files <- dir_ls(base, glob = "*metal*.xlsx")
    phys_files <- dir_ls(base, glob = "*physical*.xlsx")
  } else {
    all_files <- list.files(base, pattern = "\\.xlsx$", full.names = TRUE)
    metal_files <- all_files[grepl("metal", all_files, ignore.case = TRUE)]
    phys_files <- all_files[grepl("physical", all_files, ignore.case = TRUE)]
  }
}, error = function(e) {
  cat("Warning: Could not locate data files. Using sample data structure.\n")
  metal_files <- character(0)
  phys_files <- character(0)
})

# Validate files
if (length(metal_files) > 0) validate_files(metal_files, "metal")
if (length(phys_files) > 0) validate_files(phys_files, "physical")

# Load and clean data
if (length(metal_files) > 0 && length(phys_files) > 0) {
  # Load real data
  metals_raw <- map_dfr(metal_files, ~read_excel(.x) %>% clean_names())
  phys_raw <- map_dfr(phys_files, ~read_excel(.x) %>% clean_names())
  
  # Clean datasets
  metals <- clean_amd_data(metals_raw, "metals")
  phys <- clean_amd_data(phys_raw, "physical")
  
  # Join datasets
  amd_raw <- left_join(metals, phys, by = c("site", "season", "n"))
  
} else {
  # Create sample data for demonstration
  cat("⚠ No data files found. Creating sample dataset for demonstration.\n")
  
  set.seed(42)
  n_samples <- 120
  
  amd_raw <- tibble(
    site = rep(paste0("Site_", LETTERS[1:8]), each = 15),
    season = rep(c("dry", "wet"), length.out = n_samples),
    n = rep(1:15, 8),
    p_h = pmax(0.5, pmin(12, rnorm(n_samples, mean = 4.5, sd = 2.5))),
    temp_c = rnorm(n_samples, mean = 15, sd = 5),
    cond_s_cm = abs(rnorm(n_samples, mean = 1500, sd = 800)),
    q_l_s = abs(rnorm(n_samples, mean = 2.5, sd = 1.2)),
    # Heavy metals with realistic AMD concentrations
    fe = abs(rnorm(n_samples, mean = 45, sd = 25)),
    mn = abs(rnorm(n_samples, mean = 12, sd = 8)),
    zn = abs(rnorm(n_samples, mean = 8, sd = 5)),
    cu = abs(rnorm(n_samples, mean = 3.2, sd = 2.1)),
    al = abs(rnorm(n_samples, mean = 15, sd = 10)),
    pb = abs(rnorm(n_samples, mean = 0.8, sd = 0.5)),
    cd = abs(rnorm(n_samples, mean = 0.15, sd = 0.1)),
    cr = abs(rnorm(n_samples, mean = 0.05, sd = 0.03)),
    ni = abs(rnorm(n_samples, mean = 0.25, sd = 0.15)),
    as = abs(rnorm(n_samples, mean = 0.35, sd = 0.2))
  )
}

# Clean the final dataset
amd <- clean_amd_data(amd_raw, "combined AMD")

# ============================================================================
# COLUMN NAME DETECTION AND VALIDATION - ADDED FIX
# ============================================================================

# Debug: Check actual column names after cleaning
cat("\n=== COLUMN NAME VALIDATION ===\n")
cat("Actual column names in cleaned data:\n")
print(names(amd))

# Detect conductivity column
cond_cols <- names(amd)[grepl("cond", names(amd), ignore.case = TRUE)]
cat("Conductivity columns found:", paste(cond_cols, collapse = ", "), "\n")

# Determine the actual conductivity column name
if (length(cond_cols) > 0) {
  actual_cond_col <- cond_cols[1]
  cat("Using conductivity column:", actual_cond_col, "\n")
} else {
  # Fallback options
  possible_names <- c("cond_s_cm", "conductivity", "cond", "ec")
  actual_cond_col <- intersect(possible_names, names(amd))
  
  if (length(actual_cond_col) > 0) {
    actual_cond_col <- actual_cond_col[1]
    cat("Using fallback conductivity column:", actual_cond_col, "\n")
  } else {
    cat("Warning: No conductivity column found. Creating a dummy column.\n")
    amd$cond_s_cm <- 1500  # Default value
    actual_cond_col <- "cond_s_cm"
  }
}

# Detect flow column
flow_cols <- names(amd)[grepl("q_l_s|flow", names(amd), ignore.case = TRUE)]
cat("Flow columns found:", paste(flow_cols, collapse = ", "), "\n")

if (length(flow_cols) > 0) {
  actual_flow_col <- flow_cols[1]
  cat("Using flow column:", actual_flow_col, "\n")
} else {
  possible_flow_names <- c("q_l_s", "flow", "discharge")
  actual_flow_col <- intersect(possible_flow_names, names(amd))
  
  if (length(actual_flow_col) > 0) {
    actual_flow_col <- actual_flow_col[1]
    cat("Using fallback flow column:", actual_flow_col, "\n")
  } else {
    cat("Warning: No flow column found. Creating a dummy column.\n")
    amd$q_l_s <- 2.5  # Default value
    actual_flow_col <- "q_l_s"
  }
}

# ============================================================================
# DETECT METAL COLUMNS AND VALIDATE
# ============================================================================

# Detect metal columns
available_metals <- detect_metal_columns(amd)

# Add EPA/WHO standards for comparison
epa_standards <- tibble(
  metal = c("AL", "AS", "CD", "CR", "CU", "FE", "MN", "NI", "PB", "ZN"),
  drinking_water_mcl = c(0.2, 0.01, 0.005, 0.1, 1.3, 0.3, 0.05, 0.1, 0.015, 5),
  aquatic_life_acute = c(0.75, 0.34, 0.002, 0.57, 0.013, 1.0, 1.0, 0.47, 0.065, 0.12),
  aquatic_life_chronic = c(0.087, 0.15, 0.00025, 0.074, 0.009, 1.0, 1.0, 0.052, 0.0025, 0.12)
)

# ============================================================================
# ENHANCED DATA TRANSFORMATION - FIXED VERSION
# ============================================================================

# Enhanced data transformation with dynamic column detection
amd_enhanced <- amd %>%
  mutate(
    # Seasonal factor
    season = factor(season, levels = c("dry", "wet")),
    
    # Enhanced pH categories
    ph_category = case_when(
      p_h < 2 ~ "Extremely Acidic (<2)",
      p_h >= 2 & p_h < 4 ~ "Very Acidic (2-4)",
      p_h >= 4 & p_h < 6 ~ "Acidic (4-6)",
      p_h >= 6 & p_h < 7 ~ "Slightly Acidic (6-7)",
      p_h >= 7 & p_h < 8 ~ "Neutral-Alkaline (7-8)",
      p_h >= 8 & p_h < 10 ~ "Alkaline (8-10)",
      p_h >= 10 ~ "Very Alkaline (>10)",
      TRUE ~ "Unknown"
    ),
    ph_category = factor(ph_category, levels = c("Extremely Acidic (<2)", "Very Acidic (2-4)", 
                                                "Acidic (4-6)", "Slightly Acidic (6-7)",
                                                "Neutral-Alkaline (7-8)", "Alkaline (8-10)", 
                                                "Very Alkaline (>10)")),
    
    # Conductivity categories - FIXED to use dynamic column detection
    cond_category = case_when(
      !!sym(actual_cond_col) < 500 ~ "Low (<500)",
      !!sym(actual_cond_col) >= 500 & !!sym(actual_cond_col) < 1500 ~ "Medium (500-1500)",
      !!sym(actual_cond_col) >= 1500 & !!sym(actual_cond_col) < 3000 ~ "High (1500-3000)",
      !!sym(actual_cond_col) >= 3000 ~ "Very High (>3000)",
      TRUE ~ "Unknown"
    ),
    
    # Flow categories - FIXED to use dynamic column detection
    flow_category = case_when(
      !!sym(actual_flow_col) < 1 ~ "Low (<1 L/s)",
      !!sym(actual_flow_col) >= 1 & !!sym(actual_flow_col) < 5 ~ "Medium (1-5 L/s)",
      !!sym(actual_flow_col) >= 5 ~ "High (>5 L/s)",
      TRUE ~ "Unknown"
    )
  )

# Add outlier detection for key parameters
key_params <- c("p_h", actual_cond_col, actual_flow_col)
if (length(available_metals) > 0) {
  key_params <- c(key_params, available_metals)
}

# Only include parameters that actually exist in the dataset
existing_params <- intersect(key_params, names(amd_enhanced))
if (length(existing_params) > 0) {
  amd_enhanced <- detect_outliers(amd_enhanced, existing_params)
}

# Create long format for metal analysis
if (length(available_metals) > 0) {
  amd_long <- amd_enhanced %>% 
    pivot_longer(
      cols = all_of(available_metals),
      names_to = "metal",
      values_to = "conc_mg_l"
    ) %>% 
    mutate(
      # Calculate daily loads (mg/L × L/s × conversion factor)
      # Use dynamic flow column
      load_kg_d = conc_mg_l * !!sym(actual_flow_col) * 86.4e-6,
      
      # Format metal names
      metal = factor(toupper(metal), levels = toupper(available_metals)),
      
      # Log-transformed concentrations for analysis
      log_conc = log10(conc_mg_l + 0.001)  # Add small constant to handle zeros
    ) %>%
    filter(!is.na(conc_mg_l)) %>%
    # Add regulatory comparisons
    left_join(epa_standards, by = "metal") %>%
    mutate(
      exceeds_drinking = conc_mg_l > drinking_water_mcl,
      exceeds_aquatic_acute = conc_mg_l > aquatic_life_acute,
      exceeds_aquatic_chronic = conc_mg_l > aquatic_life_chronic,
      risk_level = case_when(
        exceeds_drinking ~ "High Risk (Exceeds Drinking Water)",
        exceeds_aquatic_acute ~ "High Risk (Exceeds Aquatic Acute)",
        exceeds_aquatic_chronic ~ "Moderate Risk (Exceeds Aquatic Chronic)",
        TRUE ~ "Low Risk"
      ),
      risk_level = factor(risk_level, levels = c("Low Risk", "Moderate Risk (Exceeds Aquatic Chronic)", 
                                               "High Risk (Exceeds Aquatic Acute)", "High Risk (Exceeds Drinking Water)"))
    )
}

# ============================================================================
# COMPREHENSIVE DATA QUALITY ASSESSMENT
# ============================================================================

cat("\n=== DATA QUALITY ASSESSMENT ===\n")

# Enhanced summary statistics
amd_summary <- skim(amd_enhanced)
print(amd_summary)

# Create comprehensive missing data analysis
missing_analysis <- amd_enhanced %>%
  summarise(
    across(everything(), list(
      missing_count = ~sum(is.na(.)),
      missing_percent = ~round(sum(is.na(.)) / n() * 100, 1),
      complete_count = ~sum(!is.na(.))
    )),
    .groups = "drop"
  ) %>%
  pivot_longer(everything(), names_to = "variable_stat", values_to = "value") %>%
  separate(variable_stat, into = c("variable", "statistic"), sep = "_(?=[^_]+$)") %>%
  pivot_wider(names_from = statistic, values_from = value) %>%
  arrange(desc(percent))

# Visualize missing data patterns
p_missing <- vis_miss(amd_enhanced, cluster = TRUE) +
  labs(title = "Missing Data Patterns in Enhanced AMD Dataset",
       subtitle = "Clustered by missing data patterns") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

print(p_missing)

# Data quality flags summary
if ("ph_flag" %in% names(amd_enhanced)) {
  quality_summary <- amd_enhanced %>%
    summarise(
      total_samples = n(),
      ph_valid = sum(ph_flag == "valid", na.rm = TRUE),
      ph_missing = sum(ph_flag == "missing", na.rm = TRUE),
      ph_out_of_range = sum(ph_flag == "out_of_range", na.rm = TRUE),
      .groups = "drop"
    )
  
  cat("Data Quality Summary:\n")
  cat("• Total samples:", quality_summary$total_samples, "\n")
  cat("• Valid pH measurements:", quality_summary$ph_valid, "\n")
  cat("• Missing pH:", quality_summary$ph_missing, "\n")
  cat("• Out-of-range pH:", quality_summary$ph_out_of_range, "\n")
}

# ============================================================================
# ENHANCED EXPLORATORY DATA ANALYSIS
# ============================================================================

cat("\n=== ENHANCED EXPLORATORY DATA ANALYSIS ===\n")

# 1. Comprehensive pH Analysis
p_ph_comprehensive <- amd_enhanced %>%
  ggplot(aes(x = reorder(site, p_h), y = p_h)) +
  geom_boxplot(aes(fill = season), alpha = 0.8, outlier.shape = 21) +
  geom_hline(yintercept = c(2, 4, 6, 7, 8, 10), linetype = "dashed", alpha = 0.5) +
  scale_fill_viridis_d(option = "C", name = "Season") +
  labs(
    x = "Site (ordered by median pH)",
    y = "pH",
    title = "Comprehensive pH Analysis by Site and Season",
    subtitle = "Dashed lines indicate pH category boundaries"
  ) +
  annotate("text", x = 1, y = 1, label = "Extremely\nAcidic", size = 3, alpha = 0.7) +
  annotate("text", x = 1, y = 3, label = "Very\nAcidic", size = 3, alpha = 0.7) +
  annotate("text", x = 1, y = 5, label = "Acidic", size = 3, alpha = 0.7) +
  annotate("text", x = 1, y = 7.5, label = "Neutral", size = 3, alpha = 0.7)

print(p_ph_comprehensive)

# 2. Enhanced Metal Concentration Analysis
if (length(available_metals) > 0 && exists("amd_long")) {
  
  # Statistical summary by metal
  metal_stats <- amd_long %>%
    group_by(metal) %>%
    summarise(
      n_obs = n(),
      mean_conc = mean(conc_mg_l, na.rm = TRUE),
      median_conc = median(conc_mg_l, na.rm = TRUE),
      q75_conc = quantile(conc_mg_l, 0.75, na.rm = TRUE),
      max_conc = max(conc_mg_l, na.rm = TRUE),
      cv = sd(conc_mg_l, na.rm = TRUE) / mean_conc,
      n_above_drinking = sum(exceeds_drinking, na.rm = TRUE),
      n_above_aquatic = sum(exceeds_aquatic_acute, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    arrange(desc(mean_conc))
  
  # Display enhanced metal statistics
  metal_stats %>%
    mutate(across(where(is.numeric), ~round(., 3))) %>%
    kable(caption = "Enhanced Metal Concentration Statistics with Regulatory Exceedances",
          col.names = c("Metal", "N Obs", "Mean (mg/L)", "Median (mg/L)", "Q75 (mg/L)",
                       "Max (mg/L)", "CV", "Above Drinking Std", "Above Aquatic Std")) %>%
    kable_styling(bootstrap_options = c("striped", "hover")) %>%
    column_spec(8, color = "white", 
                background = spec_color(metal_stats$n_above_drinking, option = "plasma")) %>%
    column_spec(9, color = "white", 
                background = spec_color(metal_stats$n_above_aquatic, option = "plasma"))
  
  # Enhanced metal concentration visualization
  p_metals_enhanced <- ggplot(amd_long, aes(x = reorder(metal, conc_mg_l), y = conc_mg_l)) +
    geom_boxplot(aes(fill = risk_level), alpha = 0.8, outlier.shape = 21) +
    geom_jitter(width = 0.3, alpha = 0.3, size = 0.8) +
    scale_y_log10(labels = scales::scientific) +
    scale_fill_manual(values = c("Low Risk" = "#2E8B57", 
                                "Moderate Risk (Exceeds Aquatic Chronic)" = "#DAA520",
                                "High Risk (Exceeds Aquatic Acute)" = "#FF6347",
                                "High Risk (Exceeds Drinking Water)" = "#DC143C")) +
    labs(
      x = "Metal",
      y = "Concentration (mg/L, log scale)",
      title = "Metal Concentrations with Regulatory Risk Assessment",
      subtitle = "Colors indicate risk level based on EPA standards",
      fill = "Risk Level"
    )
  
  print(p_metals_enhanced)
  
  # 3. Advanced Seasonal Comparison with Statistics
  seasonal_tests <- compare_seasons(amd_long, "conc_mg_l")
  
  if (!is.null(seasonal_tests)) {
    # Display statistical test results
    seasonal_tests %>%
      filter(!is.na(p_value)) %>%
      arrange(p_value) %>%
      mutate(across(where(is.numeric), ~round(., 4))) %>%
      kable(caption = "Seasonal Comparison Statistical Results (Wilcoxon Rank-Sum Tests)",
            col.names = c("Metal", "N Dry", "N Wet", "Median Dry", "Median Wet",
                         "P-value", "Fold Change", "Adj P-value", "Significant", "Interpretation")) %>%
      kable_styling(bootstrap_options = c("striped", "hover")) %>%
      column_spec(9, color = "white", 
                  background = ifelse(seasonal_tests$significant[!is.na(seasonal_tests$p_value)], 
                                    "#228B22", "#696969"))
    
    # Visualize seasonal differences
    high_conc_metals <- metal_stats %>%
      slice_max(mean_conc, n = 6) %>%
      pull(metal)
    
    p_seasonal_enhanced <- ggplot(filter(amd_long, metal %in% high_conc_metals),
                                 aes(x = season, y = conc_mg_l, fill = season)) +
      geom_boxplot(alpha = 0.8, outlier.shape = 21) +
      geom_jitter(width = 0.2, alpha = 0.4, size = 0.8) +
      facet_wrap(~metal, scales = "free_y") +
      scale_y_log10(labels = scales::scientific) +
      scale_fill_viridis_d(option = "C", name = "Season") +
      labs(
        x = "Season",
        y = "Concentration (mg/L, log scale)",
        title = "Seasonal Comparison of High-Concentration Metals",
        subtitle = "Statistical significance indicated by color intensity"
      )
    
    print(p_seasonal_enhanced)
  }
  
  # 4. Load Analysis with Enhanced Visualization
  total_loads <- amd_long %>%
    group_by(metal, season) %>%
    summarise(
      total_load = sum(load_kg_d, na.rm = TRUE),
      mean_load = mean(load_kg_d, na.rm = TRUE),
      median_load = median(load_kg_d, na.rm = TRUE),
      .groups = "drop"
    ) %>%
    arrange(desc(total_load))
  
  # Top metals by load
  top_load_metals <- total_loads %>%
    group_by(metal) %>%
    summarise(combined_load = sum(total_load, na.rm = TRUE), .groups = "drop") %>%
    slice_max(combined_load, n = 8) %>%
    pull(metal)
  
  # Enhanced load visualization
  p_loads_enhanced <- ggplot(filter(amd_long, metal %in% top_load_metals),
                            aes(x = reorder(site, load_kg_d), y = load_kg_d)) +
    geom_col(aes(fill = season), alpha = 0.8, position = "dodge") +
    facet_wrap(~metal, scales = "free_y") +
    scale_y_log10(labels = scales::scientific) +
    scale_fill_viridis_d(option = "C", name = "Season") +
    labs(
      x = "Site",
      y = "Load (kg/day, log scale)",
      title = "Daily Metal Loads by Site and Season",
      subtitle = "Top 8 metals by total load"
    ) +
    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))
  
  print(p_loads_enhanced)
}

```
